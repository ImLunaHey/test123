name: Handle ESLint Errors

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  eslint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: |
          npx eslint . --format json -o eslint-report.json || true

      - name: Process ESLint Errors
        run: |
          # Step 1: Parse ESLint Errors
          echo "Parsing ESLint report..."
          cat eslint-report.json | jq '.' # Print full JSON report for debugging
          ERRORS=$(cat eslint-report.json | jq -c '.[] | select(.errorCount > 0)')

          if [ -z "$ERRORS" ]; then
            echo "No errors found in ESLint report. Exiting."
            exit 0
          fi

          echo "Found errors. Processing each error..."

          # Step 2: Iterate Through Errors
          echo "$ERRORS" | jq -c '.messages[] | select(.severity == 2)' | while read -r error; do
            echo "Processing error: $error" # Debug the raw error object

            FILE=$(echo "$ERRORS" | jq -r '.filePath')
            LINE=$(echo "$error" | jq -r '.line')
            RULE=$(echo "$error" | jq -r '.ruleId')

            echo "Extracted Values: FILE=$FILE, LINE=$LINE, RULE=$RULE" # Debug extracted values

            # Step 3: Prepare JSON Payload for GitHub Issue
            echo "Preparing GitHub issue payload..."
            JSON_TITLE=$(jq -n --arg rule "$RULE" --arg file "$FILE" '{"title": "ESLint Error: \($rule) in \($file)"}' | jq -r '.title')
            JSON_BODY=$(jq -n --arg file "$FILE" --arg line "$LINE" --arg rule "$RULE" '{"body": "Error in \($file) at line \($line) for rule \($rule)."}' | jq -r '.body')

            echo "Prepared Title: $JSON_TITLE"
            echo "Prepared Body: $JSON_BODY"

            # Step 4: Create GitHub Issue
            echo "Creating GitHub issue..."
            ISSUE_RESPONSE=$(curl -s -X POST -H "Authorization: token ***" \
              -d "{\"title\": \"$JSON_TITLE\", \"body\": \"$JSON_BODY\"}" \
              "https://api.github.com/repos/ImLunaHey/test123/issues")

            echo "GitHub API Response: $ISSUE_RESPONSE"

            ISSUE_URL=$(echo "$ISSUE_RESPONSE" | jq -r '.html_url')
            if [ -z "$ISSUE_URL" ] || [ "$ISSUE_URL" == "null" ]; then
              echo "Failed to create GitHub issue for RULE=$RULE in FILE=$FILE at LINE=$LINE."
              continue
            fi
            echo "GitHub issue created: $ISSUE_URL"

            # Step 5: Add eslint-disable Comment
            echo "Adding eslint-disable comment to $FILE at line $LINE..."
            sed -i "${LINE}i // eslint-disable-next-line $RULE // See: $ISSUE_URL" "$FILE" || {
              echo "Failed to add eslint-disable comment. Skipping..."
              continue
            }

            # Step 6: Commit the Change
            echo "Committing the change..."
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "actions@github.com"
            git add "$FILE"
            git commit -m "Add eslint-disable for $RULE in $FILE (See: $ISSUE_URL)" || {
              echo "Failed to commit changes for FILE=$FILE. Skipping..."
              continue
            }
          done

          # Step 7: Push Changes to Main
          echo "Pushing all changes to main branch..."
          git push origin main || {
            echo "Failed to push changes to main branch. Exiting..."
            exit 1
          }

          echo "All tasks completed successfully."

      - name: Close Fixed Issues
        run: |
          FIXED_ERRORS=$(npx eslint . --format json | jq -c '.[] | select(.errorCount == 0)')
          if [ -n "$FIXED_ERRORS" ]; then
            for issue in $(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/issues?state=open" | jq -c '.[]'); do
              ISSUE_URL=$(echo $issue | jq -r '.html_url')
              RULE=$(echo $issue | jq -r '.title' | grep -oP '(?<=ESLint Error: ).*?(?= in)')
              FILE=$(echo $issue | jq -r '.title' | grep -oP '(?<=in ).*?$')
              if echo "$FIXED_ERRORS" | grep -q "$RULE"; then
                # Close the issue
                curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -d "{\"state\": \"closed\", \"body\": \"Fixed in commit $(git rev-parse HEAD)\"}" \
                  "$ISSUE_URL"
              fi
            done
          fi
